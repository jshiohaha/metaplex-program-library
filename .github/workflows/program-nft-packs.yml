name: Program NFT Packs

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: stable

jobs:
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      core: ${{ steps.filter.outputs.core }}
      package: ${{ steps.filter.outputs.package }}
    steps:
    - uses: actions/checkout@v2
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          core:
            - 'core/**'
          package:
            - 'nft-packs/**'

  setup-versions:
    needs: [changes]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.package == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.get-solana-versions.outputs.value }}
    steps:
      - uses: actions/checkout@v3
      - id: get-solana-versions
        uses: ./.github/actions/get-solana-versions

  build-and-test-nft-packs:
    needs: [changes, setup-versions]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.package == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        SOLANA_VERSION: ${{fromJson(needs.setup-versions.outputs.versions)}}
    env:
      cache_id: program-nft-packs 
      SOLANA_VERSION: ${{ matrix.SOLANA_VERSION }}

    steps:
      # Setup Deps
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-linux-build-deps
      - uses: ./.github/actions/install-solana
        with: 
          solana_version: ${{ env.SOLANA_VERSION }}
      - uses: ./.github/actions/install-rust
        with: 
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      # Restore Cache from previous build/test
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./rust/target
          key: ${{ env.cache_id }}-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.RUSTC_HASH }}

      # Build deps
      - uses: ./.github/actions/build-metaplex
      - uses: ./.github/actions/build-token-metadata
      # Run test
      - name: test-nft-packs-program
        id: run_test
        working-directory: ./nft-packs/program
        run: |
          cargo +${{ env.RUST_TOOLCHAIN }} test-bpf --version
          cargo +${{ env.RUST_TOOLCHAIN }} test-bpf -- --nocapture --test-threads 1
